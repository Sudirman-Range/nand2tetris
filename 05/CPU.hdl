// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=instruction, b=outMtoAregister, sel=instruction[15], out=Ain);
    And(a=instruction[15], b=instruction[5], out=iANDd1);
    Not(in=instruction[15], out=NOTi);
    Or(a=NOTi, b=iANDd1, out=Aregisterload);
    ARegister(in=Ain, load=Aregisterload, out=addresstoPC, out[0..14]=addressM, out=Aregisterout);

    Not(in=instruction[12], out=NOTa);
    And(a=instruction[15], b=NOTa, out=iANDNOTa);
    Mux16(a=inM, b=Aregisterout, sel=iANDNOTa, out=AORM);

    ALU(x=Dregisterout, y=AORM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outMtoAregister, out=outMtoDregister ,out=outM, zr=zero, ng=minus);

    And(a=instruction[15], b=instruction[4], out=Dload);
    DRegister(in=outMtoDregister, load=Dload, out=Dregisterout);

    //PCload
    And(a=instruction[15], b=instruction[3], out=writeM);

    And(a=instruction[2], b=minus, out=j1ANDminus);

    And(a=instruction[1], b=zero, out=j2ANDzero);
    
    Not(in=minus, out=NOTminus);
    Not(in=zero, out=NOTzero);
    And(a=instruction[0], b=NOTminus, out=j3ANDNOTminus);
    And(a=j3ANDNOTminus, b=NOTzero, out=j3ANDNOTminusANDNOTzero);
    Or(a=j1ANDminus, b=j2ANDzero, out=j1ANDminusORj2ANDzero);
    Or(a=j1ANDminusORj2ANDzero, b=j3ANDNOTminusANDNOTzero, out=j1ANDminusORj2ANDzeroORj3ANDNOTminusANDNOTzero);
    And(a=j1ANDminusORj2ANDzeroORj3ANDNOTminusANDNOTzero, b=instruction[15], out=PCload);
    PC(in=addresstoPC, load=PCload, inc=true, reset=reset, out[0..14]=pc);

}